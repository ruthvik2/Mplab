1. Write an ALP to solve the following arithmetic operations for 8-Bit and 16-Bit numbers
Addition (+)-ADD
.MODEL SMALL
.DATA
 NUM1 DW 0008H
 NUM2 DW 0008H
 RES DW ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV BX, 0000H
 MOV AX, NUM1
 MOV BX, NUM2
 ADD AX, BX
 MOV RES, AX
 MOV AH, 4CH
 INT 21H
 END


Subtraction (-)-SUB
.MODEL SMALL
.DATA
 NUM1 DW 0008H
 NUM2 DW 0008H
 RES DW ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV BX, 0000H
 MOV AX, NUM1
 MOV BX, NUM2
 SUB AX, BX
 MOV RES, AX
 MOV AH, 4CH
 INT 21H
 END


Division (/)-DIV
.MODEL SMALL
.DATA
 NUM1 DW 0007H
 NUM2 DW 0003H
 QUE DW ?
 REM DW ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV BX, 0000H
 MOV AX, NUM1
 MOV BX, NUM2
 DIV BX
 MOV QUE, AX
 MOV REM, DX
 MOV AH, 4CH
 INT 21H
 END


Multiplication (*)-MUL
.MODEL SMALL
.DATA
 NUM1 DW 0008H
 NUM2 DW 0008H
 RES DW ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV BX, 0000H
 MOV AX, NUM1
 MOV BX, NUM2
 MUL BX
 MOV RES, AX
 MOV AH, 4CH
 INT 21H
 END


2. Write an ALP to find a factorial of a number using loop operation.
.MODEL SMALL
.DATA
 NUM DB 04H
 RES DB ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV AL, NUM
 MOV BL, AL
 DEC BL
LOOP1: MUL BL
 DEC BL
 JNZ LOOP1
 MOV RES, AL
 MOV AH, 4CH
 INT 21H
 END


3. Write an ALP to find Fibonacci series for 10 count numbers.
.MODEL SMALL
.DATA
 STR DB “FABONACCI SERIES"
 NUM DB 00H, 01H
 COUNT DB 0AH
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV CL, COUNT
 DEC CL
APPEND: MOV AL, NUM [SI]
 MOV BL, NUM [SI+1]
 ADD AL, BL
 MOV NUM [SI+2], AL
 JMP REPEAT
REPEAT: INC SI
 DEC CL
 JNZ APPEND
 MOV AH, 4CH
 INT 21H
 END


4. Write an ALP to find a greatest/largest number in an array using loop operation.
.MODEL SMALL
.DATA
 ARRAY DB 02H, 06H, 0AH, 07H, 09H
 COUNT DB 05H
 RESULT DB ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV CL, COUNT
 DEC CL
 LEA SI, ARRAY
 MOV AL, [SI]
LOOP1: CMP AL, [SI+1]
 JA LOOP2
 MOV AL, [SI+1]
LOOP2: INC SI
 DEC CL
 JNZ LOOP1
 MOV RESULT, AL
 MOV AH, 4CH
 INT 21H
 END


5. Write an ALP to find a least/smallest number in an array using loop operation.
.MODEL SMALL
.DATA
 ARRAY DB 02H, 06H, 0AH, 07H, 01H
 COUNT DB 05H
 RESULT DB ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV AX, 0000H
 MOV CL, COUNT
 DEC CL
 LEA SI, ARRAY
 MOV AL, [SI]
LOOP1: CMP AL, [SI+1]
 JB LOOP2
 MOV AL, [SI+1]
LOOP2: INC SI
 DEC CL
 JNZ LOOP1
 MOV RESULT, AL
 MOV AH, 4CH
 INT 21H
 END


6. Write an ALP to arrange the array in ascending order using nested loop operation.
.MODEL SMALL
.DATA
 STR DB “CHETHAN"
 ARRAY DB 09H, 08H, 07H, 05H, 03H
 COUNT DW 0005H
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV BX, OFFSET ARRAY
 MOV CX, COUNT
 DEC CX
NXTSCN: MOV BX, CX
 MOV SI, 0000H
NXTCOP: MOV AL, ARRAY [SI]
 MOV DL, ARRAY [SI+1]
 CMP AL, DL
 JC NOSWP
 MOV ARRAY [SI], DL
 MOV ARRAY [SI+1], AL
NOSWP: INC SI
 DEC BX
 JNZ NXTCOP
 LOOP NXTSCN
 MOV AH, 4CH
 INT 21H
 END


7. Write an ALP to arrange the array in descending order using nested loop operation.
.MODEL SMALL
.DATA
 STR DB "CHETHAN"
 ARRAY DB 03H, 05H, 07H, 08H, 09H
 COUNT DW 0005H
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV BX, OFFSET ARRAY
 MOV CX, COUNT
 DEC CX
NXTSCN: MOV BX, CX
 MOV SI, 0000H
NXTCOP: MOV AL, ARRAY [SI]
 MOV DL, ARRAY [SI+1]
 CMP AL, DL
 JNC NOSWP
 MOV ARRAY [SI], DL
 MOV ARRAY [SI+1], AL
NOSWP: INC SI
 DEC BX
 JNZ NXTCOP
 LOOP NXTSCN
 MOV AH, 4CH
 INT 21H
 END


8. Write an ALP to reverse a string “TSEB_EHT_LLA”.
.MODEL SMALL
.DATA
 STR DB "TSEB_EHT_LLA"
 REV_STR DB 06 DUP(0)
 LEN DW 000CH
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV ES, AX
 MOV CX, LEN
 LEA SI, STR
 LEA DI, REV_STR
 ADD SI, CX
 DEC SI
 LOC1: MOV AL, [SI]
 MOV [DI], AL
 DEC SI
 INC DI
 DEC CX
 JNZ LOC1
 MOV [DI],"\$"
 LEA DX, REV_STR
 MOV AH, 09H
 INT 21H
 MOV AH, 4CH
 INT 21H
 END


9. Write an ALP to concatenate two different strings “ALL THE BEST” and “FOR YOUR
EXAMINATION”
.MODEL SMALL
.DATA
 STR_1 DB "_ALL_THE_BEST_$"
 STR_2 DB "_FOR_YOUR_EXAMINATION_$"
.CODE
 MOV AX, @DATA
 MOV DS, AX
 MOV AL, "$"
 MOV BL, "$"
 LEA SI, STR_1
 LEA DI, STR_2
LOOP1: CMP [SI], AL
 JE LOOP2
 INC SI
 JMP LOOP1
LOOP2: MOV AL, [DI]
 CMP AL, BL
 JE LOOP3
 MOV [SI], AL
 INC SI
 INC DI
 JMP LOOP2
LOOP3: MOV [SI], BL
 LEA DX, STR_1
 MOV AH, 09H
 INT 21H
 MOV AH, 4CH
 INT 21H
 END


10. Write an ALP to find the given string is palindrome or not “RACECAR”.
.MODEL SMALL
.DATA
 STR DB "RACECAR"
 REV_STR DB 07 DUP (0)
 MSG1 DB " IT’S A PALINDROME$"
 MSG2 DB " IT’S NOT A PALINDROME$"
 LEN DW 0007H
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV ES, AX
 MOV CX, LEN
 LEA SI, STR
 LEA DI, REV_STR
 ADD SI, CX
 DEC SI
 REV: MOV AL, [SI]
 MOV [DI], AL
 DEC SI
 INC DI
 DEC CX
 JNZ REV
 MOV CX, LEN
 LEA SI, STR
 LEA DI, REV_STR
 CLD
 REPE CMPSB
 JE PALI
 LEA DX, MSG2
 MOV AH, 09H
 INT 21H
 JMP ND
 PALI: LEA DX, MSG1
 MOV AH, 09H
 INT 21H
 ND: MOV AH, 4CH
 INT 21H
 END


11. Write an ALP to Display Message’s using Macro's.
DISPLAY MACRO MESSAGE
 LEA DX, MESSAGE
 MOV AH, 09H
 INT 21H
 ENDM
.MODEL SMALL
.DATA
 MSG_1 DB " CHETHAN D CHAVAN $"
 MSG_2 DB " DEPARTMENT OF CSE $"
 MSG_3 DB " NMIT $"
.CODE
 MOV AX,@DATA
 MOV DS, AX
 MOV ES, AX
 DISPLAY MSG_1
 DISPLAY MSG_2
 DISPLAY MSG_3
 MOV AH, 4CH
 INT 21H
 END


12. Write an ALP to add two 16 bit numbers using procedure.
.MODEL SMALL
.DATA
 NUM_1 DW 0A0AH
 NUM_2 DW 0B0BH
 RESULT DW ?
.CODE
 MOV AX,@DATA
 MOV DS, AX
 CALL ADDITION
 MOV AH, 04CH
 INT 21H
 ADDITION PROC NEAR
 MOV AX, NUM_1
MOV BX, NUM_2
ADD AX, BX
MOV RESULT, AX
RET
 ADDITION ENDP
 END